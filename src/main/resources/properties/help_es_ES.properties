help=AJUDA
helpText=sAOAdf fssdf sdf sdf sdf fs fsf sdfdsfsdfvsvfsfsvfsvfsdfvdfvfvf


associate=To create SIPs, the user has to choose an aggregation rule. Start by selecting the files and folders that hold the content to be included in the SIPs and drag n’ drop them on a node of the classification hierarchy. This node can either be a classification scheme node, a SIP or the root level (i.e. no specific node). Alternatively, you may also click the "Associate" button to start the process. After this operation, you'll be presented with a set of options that will shape the way the SIPs are created.
associationMethod=The data assocation method defines the rules that are used to transform the input files and folders in SIPs. There are currently four methods available.
export=<p>The last step in the SIP creation process is to export the mapped SIPs to an output format to be submitted to the repository for ingest. It’s important to note that RODA-in does not check if the SIPs are valid before exporting them and this process should be performed on the repository or with an external tool.</p><p>You can personalize the export process to be tailored to your needs. The first decision is whether to export all the SIPs present in the classification plan or only the selected ones. By default, the only exported SIPs are the <strong>selected items</strong> when the user clicks the “Export” button, but that can be overriden using the “Export all” toggle button. Another required field is the destination of the SIPs once they’re exported. It’s also at this stage that the export format/type ust be chosen, at the moment, RODA-in supports two\: E-ARK SIP and BagIt.</p>
fileExplorer=<p>An item can be in one of three states\: normal, ignored or mapped. <strong>Normal</strong> is the default state of the items and the only state from which SIPs can be created.</p><p>Items in the <strong>ignored</strong> state will not be used to create packages. They can be ignored based on rules defined in the configuration of the application, or manually using the “Ignore” button. These items are hidden by default, but can be made visible by turning on a menu option.</p><p><strong>Mapped</strong> items are the ones that have already been added to an SIP. The goal is to implement a “map and forget” strategy in which users drag n’ drop items from their file system to create SIPs after which they disappear from the user interface. This enables users to fully focus on the remaining items and thus be more productive in their SIP creation project.</p>
firstStep=The first step of the workflow is to choose which computer files and folders to archive and add them to the application’s file explorer. This action will display the folder and its content in a folder tree structure. The folders and files are clearly distinguishable from each other (since their icons are different) and folders can be expanded in order to inspect its children elements.
inspectionPanel=After creating SIPs, you can opt to manually enrich the SIPs or handle exceptional cases manually. This is an optional step, nevertheless it contains some important features that should not be overlooked such as creating and validating metadata, manipulating the SIP's content or adding documentation.
inspectionPanel.associations=The associations panel displays the association rules that have the current selected node as the output. Each rule displays the input items, the aggregation option used to create the SIPs and how many SIPs were created. Additionally, the user may also remove the SIPs created by the rule by clicking the "Remove" button.
inspectionPanel.data=<p>The SIP’s <strong>data</strong> (or content) is divided in “representations” which can be added or removed. Removing files and folders from the SIP content is also possible. These files will return to the <em>normal</em> state and will become available in the file explorer to be included in another SIP. The drag n’ drop system of the data folder structure enables rearranging the content of the SIP and moving files between representations. Clicking the rightmost button changes the panel between “Data” and “Documentation”.</p><p><strong>Documentation</strong> can be added to SIPs to complement the information that is being archived in the Data section. Files and folders can be added from the application’s file explorer or from the operation system’s file explorer using a drag and drop system. Unlike when files are added to the Data section of SIPs, adding documentation does not set the state of the files as mapped, so the producer can add the same file to the documentation of any number of SIPs. After being added, the files can be removed and rearranged in the same way as in the Data section.</p>
inspectionPanel.metadata=<p>When SIPs are created using the metadata template option, you are able to edit metadata via an <strong>input form</strong>. Additionally, the <strong>XML source</strong> of the metadata file can also be displayed and edited on the user interface. In addition to editing metadata files, it’s possible to <strong>add</strong> and <strong>remove</strong> metadata files. There are three options available when adding a new metadata file\:</p><ol><li>New metadata based on an existing template</li><li>New metadata based on an existing file</li><li>Empty metadata file.</li></ol><p>To avoid conflicts, two metadata files of the same description item cannot have the same name, so new files are rejected if this happens. As a consequence of this, two files based on the same template cannot be present in the same description item.</p><p>Provided that the schema is added to the type definition, RODA-in provides another useful feature\: <strong>metadata validation</strong>. This feature is only available to metadata files created from templates and the template’s type must have a schema correctly added in the configuration. In the case where a user is editing a form, with the push of a button the tags from the template are temporarily replaced with the corresponding values and the resulting file is validated against the schema. If the file cannot be validated successfully, the application displays a detailed error message and the location of the error, otherwise it only shows a success message.</p>
link.associate=Asociar
link.associationMethod=Association method
link.export=Exportar
link.fileExplorer=FileExplorer
link.firstStep=Creating SIPs\: first step
link.inspectionPanel=Inspection panel
link.inspectionPanel.associations=Inspection\: Associations
link.inspectionPanel.data=Inspection\: Data / Documentation
link.inspectionPanel.metadata=Inspection\: Metadata
link.metadataMethod=Metadata method
link.schemaPane=Classification scheme
link.secondStep=Creating SIPs\: second step
link.templatingSystem=Templating system
metadataMethod=SIPs may contain data and metadata. The metadata is included in each SIP by means of association rules. These association rules define how descriptive metadata selected from the file system is included inside each SIP. There are currently four available metadata association options.
schemaPane=<p>To create a classification plan, the first step is to add description items using the <strong>Add</strong> button present at the bottom of the central panel. When the button is pressed, a new description item is created and appended under the selected description item or under the root if no description item is selected or the selected item is a SIP.</p><p>The removal process starts by selecting the items we wish to remove and clicking the <strong>Remove</strong> button, available at the bottom of the panel. Any selected SIPs are removed and its contents return to the normal state, so that they can be added to other SIPs. When a description item is removed, all its descendant SIPs are also removed.</p><p>By dragging and dropping selected items on top of other items, the classification scheme can be completely <strong>re-organized</strong>. The behaviour of the drag’n’drop system is described as follows\:</p><ul><li>When dropping items on a description item, the selected items are added as direct children of the item.</li><li>When dropping items on an empty section of the tree, the selected items will be added to the root of the tree.</li><li>When dropping items on a SIP, the items are added to the children of the SIP’s parent, i.e., the dropped items are at the same level of the SIP. This happens because SIPs cannot have descendants in RODA-in.</li><li>When dropping a parent on one of its descendants the action is cancelled, otherwise there would be no connection left to the rest of the tree and the entire sub-tree (starting on the dragged item) would be lost.</li></ul><p>After the classification scheme is completed, you may opt to save it for later use using the “Export” menu option which can be found under the <strong>Classification Scheme menu</strong>. Lastly, the footer displays information about the selected item\: the number of SIPs, folders, files and size.</p>
secondStep=The classification scheme can either be imported from file or created directly in the application. In the first option, the user must import a JSON formatted file which was either exported by RODA or RODA-in, since these are the only supported formats at the time. To create a classification plan, the first step is to add description items using the "Add" button present at the bottom of the central panel. When the button is pressed, a new description item is created and appended under the selected description item or under the root if no description item is selected or the selected item is a SIP. In addition to adding items, there are two other actions available, removal and organization.
templatingSystem=<h4>The templating system</h4><p>Since it's tedious to edit the template files by hand, we added a way to create forms based on the fields of the templates. These files are located in the "roda-in" folder (My Documents when using Windows and the user's home directory if using Unix), under the "templates" folder. Using the powerful Handlebars engine, anyone can create template files with the necessary information to create the form. In addition to a simple tag, (e.g. {{person}}), we can now add options which will modify the way each field is created. These options are key-value elements, e.g. <code>title\="SIP creation using RODA-in"</code>, where the key is the name of the option and the value is the value that will be given to that option. Only the first tag should have options, i.e., if there's two tags with the same name, the options of the second are ignored. The options are not required, the form is still created with a simple tag, which creates a simple text field.</p><p>The available options that alter the fields created for each tag are\:</p><ul><li>value - the predefined value of the field</li><li>order - the order of the field</li><li>type - the type of the field. The possible values are\:<ul><li>text - text field</li><li>text-area - Text area. Larger than a field text.</li><li>date - text field with a date picker</li><li>list - list with the possible values (combo box)<ul><li>options - List with the possible values that a field can have. This list is a JSonArray. Example\: options\="[\\"final\\",\\"revised\\",\\"draft\\"]"</li><li>optionsLabels - Map with the labels for each option. The key must match one of the options specified in the "options" list. The entry is another map, mapping a language (key) to a label (value). Example\: optionsLabels\="{\\"final\\"\: {\\"en\\"\:\\"Final\\", \\"pt_PT\\"\:\\"Final\\"},\\"revised\\"\: {\\"en\\"\:\\"Revised\\", \\"pt_PT\\"\:\\"Verificado\\"},\\"draft\\"\: {\\"en\\"\:\\"Draft\\", \\"pt_PT\\"\:\\"Rascunho\\"}}"</li></ul></li></ul></li><li>list - List with the possible values that a field can have. Usable when <code>type\="list"</code>. The format is a JSON array. Example\: <code>[option A, option B, "option C"]</code></li><li>label - The label that appears to the left of the field.</li><li>mandatory - If set to true the label is styled in bold to draw attention.</li><li>hidden - If set to true the field is hidden</li><li>auto-generate - Fills the value with one of the available generators. Overrides the value option\:<ul><li>now - the current date in the format year-month-day</li><li>id - generates an identifier</li><li>title - generates a title</li><li>level - adds the current description level</li><li>parentid - adds the parent's id, if it exists</li><li>language - adds the system language, based on the locale. Example\: "português" or "English"</li></ul></li></ul><p>The following is an example of how the tags can be used\:</p><p><code>{{title order\=1 type\="text" label\="Template title" mandatory\=true auto-generate\="title"}}</code></p>
tooltip.associate=Crear SIPs utilizando los elementos seleccionados.
tooltip.associationMethod=El método elegido determina cómo se envían los archivos / carpetas en SIP
tooltip.export=Inicie el proceso de exportación de los SIP seleccionados (o todos).
tooltip.fileExplorer=El explorador de archivos muestra la jerarquía de las carpetas agregadas. Un elemento puede estar en uno de los tres estados\: normal, ignorado o asignado.
tooltip.firstStep=En primer lugar, seleccione qué carpetas contienen los archivos que se archivarán.
tooltip.inspectionPanel=Después de crear SIP, puede optar por enriquecer manualmente los SIP o manejar casos excepcionales manualmente.
tooltip.inspectionPanel.associations=El panel de asociaciones muestra las reglas que se han creado con el nodo seleccionado.
tooltip.inspectionPanel.data=Este panel muestra los datos o la documentación del SIP seleccionado. Para alternar entre los dos modos, utilice el botón a la derecha.
tooltip.inspectionPanel.metadata=Crear, eliminar, editar y validar los metadatos de un SIP.
tooltip.metadataMethod=El método de metadatos elegido determina cómo se agregan los metadatos a los SIP.
tooltip.schemaPane=Crear o editar un esquema de clasificación.
tooltip.secondStep=El segundo paso es importar el esquema de clasificación de un archivo o crearlo directamente en la aplicación.
